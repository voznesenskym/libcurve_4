curve_server(3)
===============

NAME
----
curve_server - Secure server socket

SYNOPSIS
--------
----
//  Create a new server instance, providing its permanent cert
//  The caller provides the ZeroMQ context so that it can also
//  attach an authenticator (zauth) to the same context.
CZMQ_EXPORT curve_server_t *
    curve_server_new (zctx_t *ctx, zcert_t **cert_p);

//  Destructor
CZMQ_EXPORT void
    curve_server_destroy (curve_server_t **self_p);

//  Set metadata property, will be sent to clients at connection
CZMQ_EXPORT void
    curve_server_set_metadata (curve_server_t *self, char *name, char *format, ...);

//  Enable verbose tracing of commands and activity
CZMQ_EXPORT void
    curve_server_set_verbose (curve_server_t *self, bool verbose);

//  Set maximum authenticated clients
CZMQ_EXPORT void
    curve_server_set_max_clients (curve_server_t *self, int limit);

//  Set maximum unauthenticated pending clients
CZMQ_EXPORT void
    curve_server_set_max_pending (curve_server_t *self, int limit);

//  Set time-to-live for authenticated clients
CZMQ_EXPORT void
    curve_server_set_client_ttl (curve_server_t *self, int limit);

//  Set time-to-live for unauthenticated pending clients
CZMQ_EXPORT void
    curve_server_set_pending_ttl (curve_server_t *self, int limit);

//  Bind server socket to local endpoint
CZMQ_EXPORT void
    curve_server_bind (curve_server_t *self, char *endpoint);

//  Unbind server socket from local endpoint, idempotent
CZMQ_EXPORT void
    curve_server_unbind (curve_server_t *self, char *endpoint);

//  Wait for message from server
CZMQ_EXPORT zmsg_t *
    curve_server_recv (curve_server_t *self);

//  Send message to server, takes ownership of message
CZMQ_EXPORT int
    curve_server_send (curve_server_t *self, zmsg_t **msg_p);

//  Get socket handle, for polling
CZMQ_EXPORT void *
    curve_server_handle (curve_server_t *self);

//  Self test of this class
void
    curve_server_test (bool verbose);
----

DESCRIPTION
-----------

Implements a secure server socket, doing I/O in the background. This is
a high-level class intended for applications. It wraps the curve_codec
class, and runs it across a ROUTER socket to connect to a curve_server
socket at the other end.


EXAMPLE
-------
.From curve_server_test method
----
    //  Create temporary directory for test files
    srand (time (NULL));
    zsys_dir_create (TESTDIR);
    
    zcert_t *server_cert = zcert_new ();
    zcert_save (server_cert, TESTDIR "/server.cert");

    //  Install the authenticator
    zctx_t *ctx = zctx_new ();
    zauth_t *auth = zauth_new (ctx);
    assert (auth);
    zauth_set_verbose (auth, verbose);
    zauth_configure_curve (auth, "*", TESTDIR);
    
    //  We'll run a set of clients as background tasks, and the
    //  server in this foreground thread. Don't pass verbose to
    //  the clients as the results are unreadable.
    int live_clients;
    for (live_clients = 0; live_clients < 5; live_clients++)
        zthread_new (client_task, &verbose);

    curve_server_t *server = curve_server_new (ctx, &server_cert);
    curve_server_set_verbose (server, verbose);
    curve_server_bind (server, "tcp://127.0.0.1:9004");
    
    while (live_clients > 0) {
        zmsg_t *msg = curve_server_recv (server);
        if (memcmp (zframe_data (zmsg_last (msg)), "END", 3) == 0)
            live_clients--;
        curve_server_send (server, &msg);
    }

    //  Try an invalid client/server combination
    byte bad_server_key [32] = { 0 };
    zcert_t *unknown = zcert_new ();
    curve_client_t *client = curve_client_new (&unknown);
    curve_client_set_verbose (client, true);
    curve_client_connect (client, "tcp://127.0.0.1:9004", bad_server_key);
    curve_client_sendstr (client, "Hello, World");

    //  Expect no reply after 250msec
    zmq_pollitem_t pollitems [] = {
        { curve_client_handle (client), 0, ZMQ_POLLIN, 0 }
    };
    assert (zmq_poll (pollitems, 1, 250) == 0);
    curve_client_destroy (&client);
 
    //  Delete all test files
    zdir_t *dir = zdir_new (TESTDIR, NULL);
    zdir_remove (dir, true);
    zdir_destroy (&dir);
    
    curve_server_destroy (&server);
    zauth_destroy (&auth);
    zctx_destroy (&ctx);
----

SEE ALSO
--------
linkczmq:czmq[7]
